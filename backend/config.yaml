# Momentum Agent Configuration
# ============================

# Model Configuration
models:
  embedding:
    name: "all-MiniLM-L6-v2"
    show_progress: true
  llm:
    name: "llama-4-maverick-17b-128e-instruct"
    max_tokens: 500
    temperature: 0.5
    timeout: 60

# Vector Database Configuration
vector_db:
  type: "chromadb"
  path: "backend/chroma_db"
  collection_name: "codebase_memory"

# File System Configuration
file_system:
  default_code_file: "src/new_feature.py"
  default_test_file: "tests/test_new_feature.py"
  ignore_dirs:
    - ".git"
    - "__pycache__"
    - "node_modules"
    - "dist"
    - "build"
    - "venv"
    - ".turbo"
    - "docs"
  ignore_extensions:
    - ".log"
    - ".md"
    - ".json"
    - ".lock"
    - ".svg"
    - ".png"
    - ".jpg"
    - ".jpeg"
    - ".gif"

# Git Configuration
git:
  branch_prefix: "feature/momentum-"
  default_base_branch: "main"
  commit_messages:
    feature: "feat: Implement new feature via Momentum Agent"
    fix: "fix: Address review comments (Attempt #{attempt})"

# Agent Behavior Configuration
agent:
  max_fix_attempts: 3
  review_wait_time: 300  # 5 minutes in seconds
  states:
    planning: "PLANNING"
    code_generation: "CODE_GENERATION"
    testing: "TESTING"
    awaiting_review: "AWAITING_REVIEW"
    fixing: "FIXING"
    done: "DONE"
    error: "ERROR"

# Language Support Configuration
languages:
  python:
    extension: ".py"
    test_framework: "pytest"
    test_command: "pytest"
    markdown_lang: "python"
  javascript:
    extension: ".js"
    test_framework: "Jest"
    test_command: "npm test"
    markdown_lang: "javascript"
  typescript:
    extension: ".ts"
    test_framework: "Jest"
    test_command: "npm test"
    markdown_lang: "typescript"
  java:
    extension: ".java"
    test_framework: "JUnit"
    test_command: "mvn test"
    markdown_lang: "java"
  go:
    extension: ".go"
    test_framework: "Go's native testing package"
    test_command: "go test"
    markdown_lang: "go"
  ruby:
    extension: ".rb"
    test_framework: "RSpec"
    test_command: "rspec"
    markdown_lang: "ruby"

# Prompts Configuration
prompts:
  planning:
    system: "You are an expert software engineer. Create a concise, step-by-step plan to accomplish the following task. For each step, specify the file to be created or modified."
    template: "Task: {task}"
  
  code_generation:
    template: |
      Based on the following plan, please write the {language} code for the primary feature.
      
      **Plan:**
      {plan}

      **Task:** Write the full code for the main {language} file. Do not write tests yet.
      Only output the raw, complete {language} code. Do not include any explanations or markdown formatting.
  
  test_generation:
    template: |
      You are a quality assurance engineer. Given the following {language} code, please write a test file using `{test_framework}` to verify its functionality.

      **Code to Test:**
      ```{markdown_lang}
      {code}
      ```

      Only output the raw, complete code for the test file. Do not include any explanations or markdown formatting. Assume the necessary testing libraries are installed.
  
  code_fixing:
    template: |
      The following {language} code has issues that need to be fixed.

      **Original Code:**
      ```{markdown_lang}
      {original_code}
      ```

      **Review Feedback:**
      ```
      {feedback}
      ```

      Please rewrite the entire {language} file to address all the feedback points mentioned in the review.
      Only provide the complete, corrected {language} code. Do not include any explanations or apologies.

# Pull Request Configuration
pull_request:
  title: "New Feature by Momentum"
  body: "This PR was auto-generated by the Momentum AI agent."

# Status Messages Configuration
status_messages:
  planning:
    cloning: "Cloning repository..."
    creating_branch: "Creating new branch: {branch}"
    generating_plan: "Thinking! Generating a plan..."
    plan_generated: "Generated Plan:\n{plan}"
  
  code_generation:
    starting_docker: "Starting up isolated Docker environment..."
    beginning_generation: "Beginning dynamic code generation..."
    asking_llm: "Asking LLM to generate production code..."
    writing_file: "Writing generated code to: {file_path}"
  
  testing:
    beginning_generation: "Beginning dynamic test generation..."
    asking_llm: "Asking LLM to generate {test_framework} tests..."
    writing_test: "Writing generated test to: {test_path}"
    running_tests: "Running dynamically generated tests with {test_framework}..."
    tests_passed: "All generated tests passed!"
    tests_failed: "Dynamically generated tests failed:\n{output}"
  
  review:
    committing: "Committing changes and pushing to remote repo..."
    pushed: "Changes pushed to branch {branch}"
    creating_pr: "Creating Pull Request..."
    pr_created: "Pull Request created: {url}"
    waiting_review: "Waiting for CodeRabbitAI review... (will check for 5 mins)"
    comments_found: "Found {count} comments. Transitioning to FIXING."
    no_comments: "No review comments found. All done!"
  
  fixing:
    starting_attempt: "Starting self-correction attempt #{attempt}..."
    reading_code: "Reading original code from {file}..."
    asking_llm: "Asking LLM to generate corrected code..."
    applying_fixes: "Applying fixes..."
    committing_fixes: "Committing and pushing the code fixes..."
    fixes_pushed: "Fixes pushed. Returning to AWAITING_REVIEW state."
  
  general:
    state_executing: "State executing: {state}"
    workflow_complete: "Workflow complete."
    error: "Failed in state {state}: {error}"

# Slack Configuration
slack:
  command: "/momentum"
  initial_response: "ðŸš€ Got it! Starting work on your request: *'{prompt}'*\n\nI'll keep you updated with a link to the live progress view shortly."
  no_prompt_error: "Please provide a task description after the command. \nFor example: `/momentum Create a new API endpoint to fetch user profiles.`"
  error_response: "Sorry, there was an error starting the agent."

# API Configuration
api:
  cors_origins: ["*"]  # In production, restrict to specific domains
  websocket_endpoint: "/ws/status"
  slack_events_endpoint: "/slack/events"
  agent_run_endpoint: "/agent/run"